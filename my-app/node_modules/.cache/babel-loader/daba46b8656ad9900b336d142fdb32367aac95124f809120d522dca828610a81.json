{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ANITAH\\\\Desktop\\\\my-app\\\\src\\\\Component\\\\auth.js\",\n  _s = $RefreshSig$();\n// src/AuthContext.js\nimport React, { createContext, useState, useEffect } from 'react';\n\n// Create the context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\n\n// Create a provider component\nconst AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n\n  // Function to log in a user\n  const login = async (email, password) => {\n    try {\n      const response = await fetch('http://127.0.0.1:5000/api/v1/user/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        setUser(data.user); // Adjust this based on your API response\n        localStorage.setItem('token', data.token); // Save the token in localStorage\n      } else {\n        throw new Error(data.message || 'Failed to log in');\n      }\n    } catch (error) {\n      console.error('Login error:', error);\n    }\n  };\n\n  // Function to log out a user\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem('token'); // Remove the token from localStorage\n  };\n\n  // Function to check if a user is authenticated\n  const isAuthenticated = () => !!user;\n\n  // Function to fetch user data based on stored token\n  const fetchUserData = async () => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      try {\n        const response = await fetch('http://127.0.0.1:5000/api/v1/user/me', {\n          method: 'GET',\n          headers: {\n            'Authorization': `Bearer ${token}`\n          }\n        });\n        const data = await response.json();\n        if (response.ok) {\n          setUser(data.user); // Adjust this based on your API response\n        } else {\n          logout(); // Log out if the token is invalid\n        }\n      } catch (error) {\n        console.error('Fetch user data error:', error);\n        logout();\n      }\n    }\n  };\n\n  // Fetch user data when the component mounts and when fetchUserData changes\n  useEffect(() => {\n    fetchUserData();\n  }, [fetchUserData]); // Include fetchUserData in the dependency array\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      login,\n      logout,\n      isAuthenticated\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"5s2qRsV95gTJBmaaTh11GoxYeGE=\");\n_c = AuthProvider;\nexport { AuthContext, AuthProvider };\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","login","email","password","response","fetch","method","headers","body","JSON","stringify","data","json","ok","localStorage","setItem","token","Error","message","error","console","logout","removeItem","isAuthenticated","fetchUserData","getItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ANITAH/Desktop/my-app/src/Component/auth.js"],"sourcesContent":["// src/AuthContext.js\r\nimport React, { createContext, useState, useEffect } from 'react';\r\n\r\n// Create the context\r\nconst AuthContext = createContext();\r\n\r\n// Create a provider component\r\nconst AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n\r\n  // Function to log in a user\r\n  const login = async (email, password) => {\r\n    try {\r\n      const response = await fetch('http://127.0.0.1:5000/api/v1/user/login', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ email, password }),\r\n      });\r\n      const data = await response.json();\r\n      if (response.ok) {\r\n        setUser(data.user); // Adjust this based on your API response\r\n        localStorage.setItem('token', data.token); // Save the token in localStorage\r\n      } else {\r\n        throw new Error(data.message || 'Failed to log in');\r\n      }\r\n    } catch (error) {\r\n      console.error('Login error:', error);\r\n    }\r\n  };\r\n\r\n  // Function to log out a user\r\n  const logout = () => {\r\n    setUser(null);\r\n    localStorage.removeItem('token'); // Remove the token from localStorage\r\n  };\r\n\r\n  // Function to check if a user is authenticated\r\n  const isAuthenticated = () => !!user;\r\n\r\n  // Function to fetch user data based on stored token\r\n  const fetchUserData = async () => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      try {\r\n        const response = await fetch('http://127.0.0.1:5000/api/v1/user/me', {\r\n          method: 'GET',\r\n          headers: { 'Authorization': `Bearer ${token}` },\r\n        });\r\n        const data = await response.json();\r\n        if (response.ok) {\r\n          setUser(data.user); // Adjust this based on your API response\r\n        } else {\r\n          logout(); // Log out if the token is invalid\r\n        }\r\n      } catch (error) {\r\n        console.error('Fetch user data error:', error);\r\n        logout();\r\n      }\r\n    }\r\n  };\r\n\r\n  // Fetch user data when the component mounts and when fetchUserData changes\r\n  useEffect(() => {\r\n    fetchUserData();\r\n  }, [fetchUserData]); // Include fetchUserData in the dependency array\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, login, logout, isAuthenticated }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport { AuthContext, AuthProvider };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}