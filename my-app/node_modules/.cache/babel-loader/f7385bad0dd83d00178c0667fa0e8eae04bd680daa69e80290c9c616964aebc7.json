{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ANITAH\\\\Desktop\\\\my-app\\\\src\\\\Component\\\\Pages\\\\Cart.js\",\n  _s = $RefreshSig$();\nimport React, { useContext } from 'react';\nimport { useCart } from '../CartContext';\nimport { AuthContext } from '../auth'; // Assuming AuthContext is correctly exported from AuthContext.js\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Cart = () => {\n  _s();\n  const {\n    cartItems,\n    totalPrice\n  } = useCart();\n  const {\n    user\n  } = useContext(AuthContext); // Using useContext to access AuthContext\n\n  const createOrder = async () => {\n    // Ensure user is logged in before proceeding\n    if (!user) {\n      console.log('User not logged in. Redirecting to login page...');\n      // Implement redirection logic to login page or show a message\n      return;\n    }\n\n    // Collect client details (dummy data for illustration)\n    const clientDetails = {\n      name: user.name,\n      // Assuming user object has a 'name' property\n      address: user.address // Assuming user object has an 'address' property\n      // Add more client details as needed\n    };\n\n    // Prepare order data\n    const orderData = {\n      client: clientDetails,\n      cartItems: cartItems,\n      totalPrice: totalPrice\n    };\n    try {\n      // Send order data to backend API\n      const response = await fetch('http://127.0.0.1:5000/api/v1/orders', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(orderData)\n      });\n      if (response.ok) {\n        // Order successfully created, now send email notification to admin\n        const emailData = {\n          client: clientDetails,\n          orderItems: cartItems,\n          totalPrice: totalPrice\n        };\n        try {\n          const emailResponse = await fetch('http://127.0.0.1:5000/api/v1/notification', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(emailData)\n          });\n          if (emailResponse.ok) {\n            console.log('Email notification sent successfully.');\n          } else {\n            console.error('Failed to send email notification:', emailResponse.statusText);\n          }\n\n          // Clear cart items or update state as needed\n        } catch (error) {\n          console.error('Error sending email notification:', error);\n        }\n      } else {\n        // Handle error response from creating order\n        console.error('Failed to create order:', response.statusText);\n      }\n    } catch (error) {\n      console.error('Error creating order:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"cart\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Cart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: cartItems.map((item, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [item.name, \" - $\", item.price]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Total Price: $\", totalPrice]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: createOrder,\n      children: \"Order\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n_s(Cart, \"XPZMjJEgs+0eQJ6tQrcnms+7W2c=\", false, function () {\n  return [useCart];\n});\n_c = Cart;\nexport default Cart;\nvar _c;\n$RefreshReg$(_c, \"Cart\");","map":{"version":3,"names":["React","useContext","useCart","AuthContext","jsxDEV","_jsxDEV","Cart","_s","cartItems","totalPrice","user","createOrder","console","log","clientDetails","name","address","orderData","client","response","fetch","method","headers","body","JSON","stringify","ok","emailData","orderItems","emailResponse","error","statusText","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","item","index","price","onClick","_c","$RefreshReg$"],"sources":["C:/Users/ANITAH/Desktop/my-app/src/Component/Pages/Cart.js"],"sourcesContent":["import React, { useContext } from 'react';\r\nimport { useCart } from '../CartContext';\r\nimport { AuthContext } from '../auth'; // Assuming AuthContext is correctly exported from AuthContext.js\r\n\r\nconst Cart = () => {\r\n  const { cartItems, totalPrice } = useCart();\r\n  const { user } = useContext(AuthContext); // Using useContext to access AuthContext\r\n\r\n  const createOrder = async () => {\r\n    // Ensure user is logged in before proceeding\r\n    if (!user) {\r\n      console.log('User not logged in. Redirecting to login page...');\r\n      // Implement redirection logic to login page or show a message\r\n      return;\r\n    }\r\n\r\n    // Collect client details (dummy data for illustration)\r\n    const clientDetails = {\r\n      name: user.name, // Assuming user object has a 'name' property\r\n      address: user.address // Assuming user object has an 'address' property\r\n      // Add more client details as needed\r\n    };\r\n\r\n    // Prepare order data\r\n    const orderData = {\r\n      client: clientDetails,\r\n      cartItems: cartItems,\r\n      totalPrice: totalPrice\r\n    };\r\n\r\n    try {\r\n      // Send order data to backend API\r\n      const response = await fetch('http://127.0.0.1:5000/api/v1/orders', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(orderData)\r\n      });\r\n\r\n      if (response.ok) {\r\n        // Order successfully created, now send email notification to admin\r\n        const emailData = {\r\n          client: clientDetails,\r\n          orderItems: cartItems,\r\n          totalPrice: totalPrice\r\n        };\r\n\r\n        try {\r\n          const emailResponse = await fetch('http://127.0.0.1:5000/api/v1/notification', {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(emailData)\r\n          });\r\n\r\n          if (emailResponse.ok) {\r\n            console.log('Email notification sent successfully.');\r\n          } else {\r\n            console.error('Failed to send email notification:', emailResponse.statusText);\r\n          }\r\n\r\n          // Clear cart items or update state as needed\r\n        } catch (error) {\r\n          console.error('Error sending email notification:', error);\r\n        }\r\n      } else {\r\n        // Handle error response from creating order\r\n        console.error('Failed to create order:', response.statusText);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error creating order:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"cart\">\r\n      <h2>Cart</h2>\r\n      <ul>\r\n        {cartItems.map((item, index) => (\r\n          <li key={index}>{item.name} - ${item.price}</li>\r\n        ))}\r\n      </ul>\r\n      <p>Total Price: ${totalPrice}</p>\r\n      <button onClick={createOrder}>Order</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Cart;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}